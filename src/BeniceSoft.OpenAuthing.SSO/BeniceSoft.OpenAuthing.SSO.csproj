<Project Sdk="Microsoft.NET.Sdk.Web">
    <Import Project="..\..\common.props" />

    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <RootNamespace>BeniceSoft.OpenAuthing</RootNamespace>
        <LangVersion>default</LangVersion>
        <UserSecretsId>1069efc9-c740-4603-96f3-512f1f04515a</UserSecretsId>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
        <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
        <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
        <SpaProxyServerUrl>http://localhost:8000</SpaProxyServerUrl>
        <SpaProxyLaunchCommand>npm run dev</SpaProxyLaunchCommand>
        <ImplicitUsings>enable</ImplicitUsings>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(RunConfiguration)' == 'BeniceSoft.OpenAuthing.SSO' " />
    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.SpaProxy" />
        <PackageReference Include="AgileConfig.Client" />
        <PackageReference Include="BeniceSoft.Abp.AspNetCore" />
        <PackageReference Include="BeniceSoft.Abp.Auth" />
        <PackageReference Include="Microsoft.Extensions.PlatformAbstractions" />
        <PackageReference Include="OpenIddict.Quartz" />
        <PackageReference Include="OpenIddict.Server.AspNetCore" />
        <PackageReference Include="Serilog.AspNetCore" />
        <PackageReference Include="Swashbuckle.AspNetCore" />
        <PackageReference Include="Volo.Abp.Autofac" />
        <PackageReference Include="Volo.Abp.BlobStoring.FileSystem" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\BeniceSoft.OpenAuthing.Application\BeniceSoft.OpenAuthing.Application.csproj" />
        <ProjectReference Include="..\BeniceSoft.OpenAuthing.EntityFrameworkCore\BeniceSoft.OpenAuthing.EntityFrameworkCore.csproj" />
        <ProjectReference Include="..\BeniceSoft.OpenAuthing.OAuth\BeniceSoft.OpenAuthing.OAuth.csproj" />
        <ProjectReference Include="..\BeniceSoft.OpenAuthing.RemoteService.Implements\BeniceSoft.OpenAuthing.RemoteService.Implements.csproj" />
    </ItemGroup>

    <ItemGroup>
        <Content Include="..\..\.dockerignore">
            <Link>.dockerignore</Link>
        </Content>
        <Content Include="ClientApp\src\assets\secure-login.json" />
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**" />
        <None Remove="$(SpaRoot)**" />
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
    </ItemGroup>

    <ItemGroup>
        <_ContentIncludedByDefault Remove="Areas\Admin\Views\Console\Index.cshtml" />
        <_ContentIncludedByDefault Remove="Areas\Admin\Views\Shared\_AdminLayout.cshtml" />
    </ItemGroup>

    <ItemGroup>
        <Folder Include="wwwroot\uploadFiles" />
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)dist\**" />
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>
    <ItemGroup>
        <None Update="signing-certificate.pfx">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
        <None Update="encryption-certificate.pfx">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.SpaProxy" />
        <PackageReference Include="Volo.Abp.BlobStoring.FileSystem" />
        <Content Include="ClientApp\src\assets\secure-login.json" />
    </ItemGroup>

    <ItemGroup>
        <None Update="signing-certificate.pfx">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
        <None Update="encryption-certificate.pfx">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>

</Project>
