name: Build & publish openauthing images

on:
  push:
    branches: [ "master" ]
  

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./src/BeniceSoft.OpenAuthing.SSO/Dockerfile
            image: ghcr.io/benicesoft/openauthing-sso
          - dockerfile: ./src/BeniceSoft.OpenAuthing.AdminApi/Dockerfile
            image: ghcr.io/benicesoft/openauthing-api
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PACKAGE_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    outputs:
      tags: ${{ steps.meta.outputs.tags }}

  deploy:
    needs: build-and-push-image
    runs-on: self-hosted
    steps:
      - name: Get last tag or use latest
        id: last_tag
        run: |
          TAGS="${{ needs.build-and-push-image.outputs.tags }}"
          LAST_TAG=$(echo "$TAGS" | tr '\n' ' ' | awk -F' ' '{print $NF}')
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="latest"
          fi
          echo "::set-output name=tag::$LAST_TAG"
      
      - name: Deploy SSO
        run: docker service update --image ${{ steps.last_tag.outputs.tag }} --update-parallelism 1 --update-delay 10s --with-registry-auth openauthing_sso
      
      # - name: Deploy API
      #   run: docker service update --image ${{ steps.last_tag.outputs.tag }} --update-parallelism 1 --update-delay 10s --with-registry-auth openauthing_api
       